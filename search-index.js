var searchIndex={};
searchIndex["combinatorics"] = {"doc":"Utility methods and iterator adaptors of a combinatorial…","i":[[5,"all_partitions","combinatorics","An iterator over all partitions of the given input set.",null,[[["vec"],["clone"]]]],[5,"each_permutation","","Execute the given function on each permutation of the…",null,[[["fnmut"]]]],[5,"all_subsets","","An iterator over all subsets of the given input set.",null,[[["vec"],["clone"]]]],[8,"CombinationsWithReplacement","","",null,null],[11,"combinations_with_replacement","","Return an iterator adaptor that iterates over the size-`n`…",0,[[["usize"]],["combinationswithreplacement"]]],[8,"Permutations","","",null,null],[11,"permutations","","Return an iterator adaptor that iterates over permutations…",1,[[],["permutations"]]]],"p":[[8,"CombinationsWithReplacement"],[8,"Permutations"]]};
searchIndex["continued_fractions"] = {"doc":"A library relating to continued fraction expansions,…","i":[[3,"PeriodicContinuedFraction","continued_fractions","A structure representing a periodic continued fraction.",null,null],[12,"tail","","The terms in the tail of this continued fraction.",0,null],[12,"period","","The terms in the period of this continued fraction.",0,null],[3,"PeriodicContinuedFractionIterator","","A structure capable of iterating over the terms in a…",null,null],[3,"ContinuedFractionConvergents","","A structure for iterating over the convergents resulting…",null,null],[11,"new","","Create a `PeriodicContinuedFraction` with the given tail…",0,[[["vec",["u64"]],["u64"]],["periodiccontinuedfraction"]]],[11,"sqrt","","Compute a `PeriodicContinuedFraction` for the square root…",0,[[["u64"]],["periodiccontinuedfraction"]]],[11,"iter","","Return an iterator over the terms in this continued…",0,[[["self"]],["periodiccontinuedfractioniterator"]]],[11,"convergents","","Return an iterator over the convergents of this continued…",0,[[["self"]],[["periodiccontinuedfractioniterator"],["continuedfractionconvergents",["periodiccontinuedfractioniterator"]]]]],[11,"new","","Create a `ContinuedFractionConvergents` using the items…",1,[[["i"]],["continuedfractionconvergents"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"into_iter","","",2,[[],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"into_iter","","",1,[[],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"next","","",2,[[["self"]],[["option",["u64"]],["u64"]]]],[11,"next","","",1,[[["self"]],["option"]]]],"p":[[3,"PeriodicContinuedFraction"],[3,"ContinuedFractionConvergents"],[3,"PeriodicContinuedFractionIterator"]]};
searchIndex["mertens_recurrence"] = {"doc":"This crate contains a framework for calculating isolated…","i":[[3,"Recurrence","mertens_recurrence","A representation of a function defined using a…",null,null],[11,"new","","Create a new `Recurrence` defined by the function `f` and…",0,[[["a"],["f"]],["recurrence"]]],[11,"calculate_value_at","","Calculate the value of the function defined by the…",0,[[["self"],["u64"]],["i64"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]]],"p":[[3,"Recurrence"]]};
searchIndex["modular_arithmetic"] = {"doc":"Functions and structs relating to modular arithmetic.","i":[[3,"FixedModular","modular_arithmetic","",null,null],[12,"value","","",0,null],[5,"mod_add","","Calculate a + b with respect to the given modulus.",null,[[["u64"]],["u64"]]],[5,"mod_sub","","Calculate a - b with respect to the given modulus.",null,[[["u64"]],["u64"]]],[5,"mod_mul","","Calcuate a * b with respect to the given modulus, without…",null,[[["u64"]],["u64"]]],[5,"mod_exp","","Calculate `base ^ exp` with respect to the given modulus.",null,[[["u64"]],["u64"]]],[5,"mod_inverse","","Calculates the inverse of `a` with respect to modulus `m`,…",null,[[["u64"]],[["option",["u64"]],["u64"]]]],[11,"inverse","","",0,[[["self"]],[["option",["fixedmodular"]],["fixedmodular"]]]],[8,"Modulus","","Until const-generics are available, use types implementing…",null,null],[10,"modulus","","",1,[[],["u64"]]],[14,"define_modulus","","A utility macro used to easily define a struct which…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",0,[[["u64"]],["fixedmodular"]]],[11,"into","","",0,[[],["u64"]]],[11,"clone","","",0,[[["self"]],["fixedmodular"]]],[11,"eq","","",0,[[["self"],["fixedmodular"]],["bool"]]],[11,"ne","","",0,[[["self"],["fixedmodular"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"sub","","",0,[[["fixedmodular"]],["fixedmodular"]]],[11,"add","","",0,[[["fixedmodular"]],["fixedmodular"]]],[11,"mul","","",0,[[["fixedmodular"]],["fixedmodular"]]],[11,"zero","","",0,[[],["fixedmodular"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"one","","",0,[[],["fixedmodular"]]],[11,"is_one","","",0,[[["self"]],["bool"]]]],"p":[[3,"FixedModular"],[8,"Modulus"]]};
searchIndex["number_theory"] = {"doc":"Some miscellaneous functions of a number-theoretic flavour.","i":[[3,"Constraint","number_theory","A structure representing a CRT-style constraint.",null,null],[12,"residues","","The residues allowed by this constraint.",0,null],[12,"modulus","","The modulus for this constraint.",0,null],[3,"PartitionNumbersIterator","","A structure capable of iterating over the partition numbers.",null,null],[3,"PythagTripleIterator","","A structure capable of iterating over all primitive…",null,null],[5,"crt","","Calculates the residue classes that satisfy each of the…",null,[[],["constraint"]]],[5,"gcd","","Returns the greatest common divisor of two positive…",null,[[["algebraic"],["copy"],["divrem"]],[["algebraic"],["copy"],["divrem"]]]],[5,"lcm","","Returns the least common multiple of two positive integers.",null,[[["algebraic"],["copy"],["divrem"]],[["algebraic"],["copy"],["divrem"]]]],[5,"integer_sqrt","","Returns the largest integer not greater than the square…",null,[[["copy"],["algebraic"],["saturating"],["partialord"],["from",["u64"]],["into",["u64"]],["u64"]],[["copy"],["saturating"],["u64"],["algebraic"],["partialord"],["from",["u64"]],["into",["u64"]]]]],[5,"is_square","","Returns whether or not the given number is a square.",null,[[["copy"],["algebraic"],["saturating"],["partialord"],["from",["u64"]],["into",["u64"]],["u64"]],["bool"]]],[5,"binom","","Returns the value of the binomial coefficient `m` choose…",null,[[["algebraic"],["partialord"],["divrem"],["copy"]],[["algebraic"],["partialord"],["divrem"],["copy"]]]],[5,"pow","","Returns the value of `x` to the power of `y`, using…",null,[[["algebraic"],["copy"],["u64"]],[["algebraic"],["copy"]]]],[5,"checked_pow","","Returns the value of `x` to the power of `y`, using…",null,[[["algebraic"],["checked"],["copy"],["u64"]],[["algebraic"],["checked"],["copy"],["option"]]]],[5,"is_prime","","Test if `n` is prime, using the deterministic version of…",null,[[["u64"]],["bool"]]],[5,"partition_numbers","","An iterator over the partition numbers.",null,[[],[["algebraic"],["copy"],["partitionnumbersiterator"]]]],[5,"primitive_pythag_triples","","An iterator over the primitive Pythagorean triples…",null,[[["f"]],["pythagtripleiterator"]]],[11,"new","","Create a new `Constraint` with the given residues and…",0,[[["vec",["u64"]],["u64"]],["constraint"]]],[11,"empty","","Return an empty constraint, not allowing any residues.",0,[[],["constraint"]]],[6,"PythagTriple","","A type alias for a Pythagorean triple as a 3-tuple of…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"into_iter","","",1,[[],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"into_iter","","",2,[[],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"next","","",2,[[["self"]],[["pythagtriple"],["option",["pythagtriple"]]]]],[11,"eq","","",0,[[["constraint"],["self"]],["bool"]]],[11,"ne","","",0,[[["constraint"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[3,"Constraint"],[3,"PartitionNumbersIterator"],[3,"PythagTripleIterator"]]};
searchIndex["numeric_traits"] = {"doc":"Traits for operations on numeric types.","i":[[8,"Zero","numeric_traits","Defines an additive identity for `Self`",null,null],[10,"zero","","Returns the additive identity element of `Self`",0,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity",0,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity for `Self`",null,null],[10,"one","","Returns the multiplicative identity element of `Self`",1,[[],["self"]]],[10,"is_one","","Returns `true` if `self` is equal to the multiplicative…",1,[[["self"]],["bool"]]],[8,"Algebraic","","A trait for numeric types which allow addition,…",null,null],[8,"DivRem","","A trait for numeric types which allow division and…",null,null],[8,"Saturating","","A trait for numeric types which support saturating…",null,null],[10,"saturating_add","","Saturating addition operator",2,[[],["self"]]],[10,"saturating_sub","","Saturating subtraction operator",2,[[],["self"]]],[10,"saturating_mul","","Saturating multiplication operator",2,[[],["self"]]],[8,"Checked","","A trait for numeric types which support checked operations.",null,null],[10,"checked_add","","Checked addition operator",3,[[],["option"]]],[10,"checked_sub","","Checked subtraction operator",3,[[],["option"]]],[10,"checked_mul","","Checked multiplication operator",3,[[],["option"]]]],"p":[[8,"Zero"],[8,"One"],[8,"Saturating"],[8,"Checked"]]};
searchIndex["primesieve"] = {"doc":"A library for generating prime numbers using a segmented…","i":[[3,"Sieve","primesieve","A structure which sieves for primes up to a given limit…",null,null],[3,"SieveIterator","","A structure capable of iterating over the primes held in a…",null,null],[11,"is_prime","","Returns whether or not `n` is a prime number, or `Err(())`…",0,[[["self"],["u64"]],[["bool"],["result",["bool"]]]]],[11,"factorise","","Factorises `n` into (prime, exponent) pairs.",0,[[["self"],["u64"]],[["vec"],["result",["vec"]]]]],[11,"euler_phi","","Calculates the value of Euler's totient function `ϕ` at `n`.",0,[[["self"],["u64"]],[["result",["u64"]],["u64"]]]],[11,"order","","Calculates the order of n with respect to the given modulus.",0,[[["self"],["u64"]],[["result",["u64"]],["u64"]]]],[11,"number_of_divisors","","Calculates the number of divisors of `n`.",0,[[["self"],["u64"]],[["result",["u64"]],["u64"]]]],[11,"sum_of_divisors","","Calculates the sum of the divisors of `n`.",0,[[["self"],["u64"]],[["result",["u64"]],["u64"]]]],[11,"to_limit","","Create a new `Sieve` which knows about the primes up to…",0,[[["u64"]],["sieve"]]],[11,"to_n_primes","","Create a new `Sieve` which knows about at least the first…",0,[[["usize"]],["sieve"]]],[11,"limit","","Returns the highest number that this `Sieve` knows about.…",0,[[["self"]],["u64"]]],[11,"num_primes","","Returns the number of primes that this `Sieve` knows…",0,[[["self"]],["usize"]]],[11,"nth_prime","","Returns the `n`th prime number, indexed from 0, or `None`…",0,[[["self"],["usize"]],[["option",["u64"]],["u64"]]]],[11,"iter","","Return an iterator over the primes in this `Sieve`.",0,[[["self"]],["sieveiterator"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"into_iter","","",1,[[],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"next","","",1,[[["self"]],[["option",["u64"]],["u64"]]]]],"p":[[3,"Sieve"],[3,"SieveIterator"]]};
searchIndex["problem001"] = {"doc":"Problem 1 (Multiples of 3 and 5)","i":[[5,"sum_of_multiples","problem001","Calculate the sum of the multiples of `n` below the given…",null,[[["u64"]],["u64"]]],[5,"solve","","Find the sum of all multiples of 3 or 5 below the given…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem002"] = {"doc":"Problem 2 (Even Fibonacci numbers)","i":[[3,"Fibonacci","problem002","A structure which will allow iteration over Fibonacci…",null,null],[12,"curr","","",0,null],[12,"next","","",0,null],[5,"fibonacci","","Returns a Fibonacci sequence iterator starting 1, 1, 2, 3,…",null,[[],["fibonacci"]]],[5,"solve","","Find the sum of all even Fibonacci numbers below the given…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"next","","",0,[[["self"]],[["option",["u64"]],["u64"]]]]],"p":[[3,"Fibonacci"]]};
searchIndex["problem003"] = {"doc":"Problem 3 (Largest prime factor)","i":[[5,"solve","problem003","Find the largest prime factor of n.",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem004"] = {"doc":"Problem 4 (Largest palindrome product)","i":[[5,"is_palindrome","problem004","Check whether the given number is a palindrome.",null,[[["u64"]],["bool"]]],[5,"solve","","Find the largest palindrome which is the product of two…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem005"] = {"doc":"Problem 5 (Smallest multiple)","i":[[5,"solve","problem005","Find the smallest number divisible by each of 2, 3, ...,…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem006"] = {"doc":"Problem 6 (Sum square difference)","i":[[5,"solve","problem006","Find the difference between the sum of the squares of the…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem007"] = {"doc":"Problem 7 (10001st prime)","i":[[5,"solve","problem007","Find the `n`th prime number.",null,[[["usize"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem008"] = {"doc":"Problem 8 (Largest product in a series)","i":[[5,"solve","problem008","Find the largest product of `n` consecutive digits in the…",null,[[["usize"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem009"] = {"doc":"Problem 9 (Special Pythagorean triplet)","i":[[5,"solve","problem009","Find the first Pythagorean triplet with a + b + c = n,…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem010"] = {"doc":"Problem 10 (Summation of primes)","i":[[5,"solve","problem010","Find the sum of the primes less than the given limit.",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem011"] = {"doc":"Problem 11 (Largest product in a grid)","i":[[5,"solve","problem011","Find the largest product of `n` consecutive numbers in the…",null,[[["isize"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem012"] = {"doc":"Problem 12 (Highly divisible triangular number)","i":[[5,"solve","problem012","Find the first triangle number to have more than `n`…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem013"] = {"doc":"Problem 13 (Large sum)","i":[[5,"solve","problem013","Find the first `n` digits of the sum of the given iterator…",null,[[["i"],["usize"]],["string"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem014"] = {"doc":"Problem 14 (Longest Collatz sequence)","i":[[5,"solve","problem014","Find the number below the given limit with the longest…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem015"] = {"doc":"Problem 15 (Lattice paths)","i":[[5,"solve","problem015","Find the `number of paths through a square grid of size `n`.",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem016"] = {"doc":"Problem 16 (Power digit sum)","i":[[5,"solve","problem016","Find the sum of the digits of base ^ exp.",null,[[["u64"],["usize"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem017"] = {"doc":"Problem 17 (Number letter counts)","i":[[5,"number_of_letters_below_100","problem017","Find the number of letters of a number below 100.",null,[[["usize"]],["usize"]]],[5,"number_of_letters_below_1000","","Find the number of letters in the number 1 <= n <= 1000.",null,[[["usize"]],["usize"]]],[5,"solve","","Find the total number of letters used when writing the…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[17,"SMALL_LENS","","",null,null]],"p":[]};
searchIndex["problem018"] = {"doc":"Problem 18 (Maximum path sum I)","i":[[5,"solve","problem018","Find the maximum sum of a path through the given…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem019"] = {"doc":"Problem 19 (Counting Sundays)","i":[[5,"days_in_month","problem019","Returns how many days were in the given month in the given…",null,[[["usize"],["u64"]],["u64"]]],[5,"solve","","Find the number of months from 1901 to the given year…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem020"] = {"doc":"Problem 20 (Factorial digit sum)","i":[[5,"factorial","problem020","Calculate n! (factorial).",null,[[["u64"]],["biguint"]]],[5,"solve","","Find the sum of the digits of n! (factorial).",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem021"] = {"doc":"Problem 21 (Amicable numbers)","i":[[5,"is_amicable","problem021","Check whether n is amicable.",null,[[["u64"],["sieve"]],["bool"]]],[5,"solve","","Find the sum of the amicable numbers below the given limit.",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem022"] = {"doc":"Problem 22 (Names scores)","i":[[5,"solve","problem022","Find the sum of the scores of the given list of names.",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem023"] = {"doc":"Problem 23 (Non-abundant sums)","i":[[5,"is_sum_of_abundants","problem023","Check whether n is a sum of two abundant numbers.",null,[[["usize"]],["bool"]]],[5,"abundants","","Find the abundant numbers up to the given limit.",null,[[["u64"]],[["vec",["bool"]],["bool"]]]],[5,"solve","","Find the sum of the numbers below the given limit which…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem024"] = {"doc":"Problem 24 (Lexicographic permutations)","i":[[5,"solve","problem024","Find the nth lexicographic permutation of [0, 1, ..., m -…",null,[[["usize"]],[["vec",["usize"]],["usize"]]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem025"] = {"doc":"Problem 25 (1000-digit Fibonacci number)","i":[[5,"solve","problem025","Find the index of the first Fibonacci number with at least…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem026"] = {"doc":"Problem 26 (Reciprocal cycles)","i":[[5,"cycle_length","problem026","Find the length of the cycle of the decimal 1/d, where d…",null,[[["u64"],["sieve"]],["u64"]]],[5,"solve","","Find the number below the given limit with the longest…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem027"] = {"doc":"Problem 27 (Quadratic primes)","i":[[5,"num_primes","problem027","Find the number of primes produced by n^2 + an + b for…",null,[[["i64"],["sieve"]],["usize"]]],[5,"solve","","Find the product of the values of a, b below the given…",null,[[["u64"]],["i64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem028"] = {"doc":"Problem 28 (Number spiral diagonals)","i":[[5,"solve","problem028","Find the sum of the numbers on the diagonals of a spiral…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem029"] = {"doc":"Problem 29 (Distinct powers)","i":[[5,"solve","problem029","Find the number of distinct values a^b for 2 ≤ a ≤ `a_lim`…",null,[[["u64"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem030"] = {"doc":"Problem 30 (Digit fifth powers)","i":[[3,"PowerSumTreeStep","problem030","A description of a step that can be taken in the search…",null,null],[12,"next_digit","","The digit to add onto the end of the current value.",0,null],[3,"PowerSumTree","","The information that is held about the current state…",null,null],[12,"value","","The current value being examined.",1,null],[12,"power_sum","","The sum of the fifth powers of the digits of the current…",1,null],[12,"length","","The length, in digits, of the current value.",1,null],[12,"solution_length","","The number of digits, including leading zeroes, that a…",1,null],[5,"solve","","Find the sum of the numbers which are equal to the sum of…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[17,"FIFTH_POWER","","Fifth powers of single digits.",null,null],[11,"new","","Construct a new `PowerSumTree`.",1,[[],["powersumtree"]]],[11,"may_be_extended","","Check if the current state can possibly be extended to a…",1,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"next_steps","","Return all possible choices for the next digit to add to…",1,[[["self"]],["vec"]]],[11,"should_prune","","Check if we have reached the maximum depth, and also if we…",1,[[["self"]],["pruning"]]],[11,"apply_step","","Add the next digit to the end of the current value.",1,[[["self"]]]],[11,"revert_step","","Remove the last digit from the current value.",1,[[["self"]]]],[11,"output","","Check if the power sum is equal to the value, and output…",1,[[["self"]],["option"]]]],"p":[[3,"PowerSumTreeStep"],[3,"PowerSumTree"]]};
searchIndex["problem031"] = {"doc":"Problem 31 (Coin sums)","i":[[5,"solve","problem031","Find the number of ways of making `n` pence using English…",null,[[["usize"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem032"] = {"doc":"Problem 32 (Pandigital products)","i":[[5,"is_pandigital","problem032","Check whether the given numbers are together pandigital.",null,[[],["bool"]]],[5,"solve","","Find the sum of all pandigital products.",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem033"] = {"doc":"Problem 33 (Digit cancelling fractions)","i":[[5,"solve","problem033","Find the denominator of the product of all 2-digit…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem034"] = {"doc":"Problem 34 (Digit factorials)","i":[[3,"FactorialSumTreeStep","problem034","A description of a step that can be taken in the search…",null,null],[12,"next_digit","","The digit to add onto the end of the current value.",0,null],[3,"FactorialSumTree","","The information that is held about the current state…",null,null],[12,"value","","The current value being examined.",1,null],[12,"factorial_sum","","The sum of the factorials of the digits of the current…",1,null],[12,"length","","The length, in digits, of the current value.",1,null],[12,"solution_length","","The number of digits, including leading zeroes, that a…",1,null],[5,"solve","","Find the sum of the numbers which are equal to the sum of…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[17,"FACTORIAL","","",null,null],[11,"new","","Construct a new `FactorialSumTree`.",1,[[],["factorialsumtree"]]],[11,"may_be_extended","","Check if the current state can possibly be extended to a…",1,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"next_steps","","Return all possible choices for the next digit to add to…",1,[[["self"]],["vec"]]],[11,"should_prune","","Check if we have reached the maximum depth, and also if we…",1,[[["self"]],["pruning"]]],[11,"apply_step","","Add the next digit to the end of the current value.",1,[[["self"]]]],[11,"revert_step","","Remove the last digit from the current value.",1,[[["self"]]]],[11,"output","","Check if the factorial sum is equal to the value, and…",1,[[["self"]],["option"]]]],"p":[[3,"FactorialSumTreeStep"],[3,"FactorialSumTree"]]};
searchIndex["problem035"] = {"doc":"Problem 35 (Circular primes)","i":[[3,"CircularPrimeTreeStep","problem035","A description of a step that can be taken in the search…",null,null],[12,"next_digit","","The digit to add onto the end of the current value.",0,null],[3,"CircularPrimeTree","","The information that is held about the current state…",null,null],[12,"value","","The current value being examined.",1,null],[12,"digits","","The digits of the current value.",1,null],[12,"max_digits","","The maximum number of digits that we need to consider.",1,null],[12,"sieve","","A sieve to facilitate primality testing during the search.",1,null],[5,"solve","","Find the number of circular primes there are with at most…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"with_max_digits","","Construct a new `CircularPrimeTree` which will produce…",1,[[["usize"]],["circularprimetree"]]],[11,"is_circular_prime","","Check if the digits in the current state make a circular…",1,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"next_steps","","All possible choices of next digit - all circular primes…",1,[[["self"]],["vec"]]],[11,"should_prune","","Prune the tree when we hit the maximum number of digits.",1,[[["self"]],["pruning"]]],[11,"apply_step","","Add the next digit to the end of the current value.",1,[[["self"]]]],[11,"revert_step","","Remove the last digit from the current value.",1,[[["self"]]]],[11,"output","","Output the current value, if it is a circular prime.",1,[[["self"]],["option"]]]],"p":[[3,"CircularPrimeTreeStep"],[3,"CircularPrimeTree"]]};
searchIndex["problem036"] = {"doc":"Problem 36 (Double-base palindromes)","i":[[5,"is_binary_palindrome","problem036","Check whether the given number is a binary palindrome.",null,[[["u64"]],["bool"]]],[5,"even_palindromise","","Convert a number into an even-length palindrome by…",null,[[["u64"]],["u64"]]],[5,"odd_palindromise","","Convert a number into an odd-length palindrome with middle…",null,[[["u64"]],["u64"]]],[5,"palindromes","","An iterator over all palindromes with up to the given…",null,[[["u64"]],[["iterator"],["box",["iterator"]]]]],[5,"solve","","Find the sum of all numbers up to the given number of…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem037"] = {"doc":"Problem 37 (Truncatable primes)","i":[[3,"TruncatablePrimeTreeStep","problem037","A description of a step that can be taken in the search…",null,null],[12,"next_digit","","",0,null],[3,"TruncatablePrimeTree","","The information that is held about the current state…",null,null],[12,"value","","The current value being examined.",1,null],[12,"sieve","","A sieve to facilitate primality testing.",1,null],[5,"solve","","Find the sum of all primes which are both left-truncatable…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"new","","Construct a new `TruncatablePrimeTree`",1,[[],["truncatableprimetree"]]],[11,"is_prime","","Determine if the given value is prime, expanding the sieve…",1,[[["self"],["u64"]],["bool"]]],[11,"is_left_truncatable","","Determine if the current state is a left-truncatable…",1,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"next_steps","","All possible choices for the next digit, taking into…",1,[[["self"]],["vec"]]],[11,"should_prune","","Prune the tree above the current value if it is not prime…",1,[[["self"]],["pruning"]]],[11,"apply_step","","Add the next digit to the end of the current value.",1,[[["self"]]]],[11,"revert_step","","Remove the last digit from the current value.",1,[[["self"]]]],[11,"output","","Output the current value, if it is a truncatable prime.",1,[[["self"]],["option"]]]],"p":[[3,"TruncatablePrimeTreeStep"],[3,"TruncatablePrimeTree"]]};
searchIndex["problem038"] = {"doc":"Problem 38 (Pandigital multiples)","i":[[5,"is_pandigital","problem038","Check whether the given number is pandigital.",null,[[["u64"]],["bool"]]],[5,"num_digits","","Find the number of digits in the given number.",null,[[["u64"]],["u64"]]],[5,"concatenate","","Concatenate the two given numbers, `a` followed by `b`.",null,[[["u64"]],["u64"]]],[5,"concatenated_product","","Find the first concatenated product of n which contains at…",null,[[["u64"]],["u64"]]],[5,"solve","","Find the largest pandigital concatenated product.",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem039"] = {"doc":"Problem 39 (Integer right triangles)","i":[[5,"solve","problem039","Find the perimeter below the given limit for which there…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem040"] = {"doc":"Problem 40 (Champernowne's constant)","i":[[5,"digits_used","problem040","Calculate the number of digits used when writing the…",null,[[["u64"]],["u64"]]],[5,"find_digit","","Find the digit at the specified index of CHampernowne's…",null,[[["u64"]],["u64"]]],[5,"solve","","Find the product of the digits at the specified positions…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem041"] = {"doc":"Problem 41 (Pandigital prime)","i":[[3,"PandigitalIterator","problem041","A structure for iterating over the pandigital numbers of a…",null,null],[12,"digits","","",0,null],[12,"next_num","","",0,null],[5,"to_int","","Convert a vector of digits into an actual number.",null,[[],["u64"]]],[5,"pandigitals","","An iterator over the pandigital numbers of the given…",null,[[["u64"]],["pandigitaliterator"]]],[5,"solve","","Find the largest pandigital prime.",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"next","","",0,[[["self"]],[["option",["u64"]],["u64"]]]]],"p":[[3,"PandigitalIterator"]]};
searchIndex["problem042"] = {"doc":"Problem 42 (Coded triangle numbers)","i":[[5,"is_triangular","problem042","Decide if a given number is triangular.",null,[[["u64"]],["bool"]]],[5,"solve","","Find how many of the given words are triangle words.",null,[[["i"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem043"] = {"doc":"Problem 43 (Sub-string divisibility)","i":[[3,"SubstringTreeStep","problem043","A description of a step that can be taken in the search…",null,null],[12,"next_digit","","",0,null],[3,"SubstringTree","","The information that is held about the current state…",null,null],[12,"value","","The current value that is being examined.",1,null],[12,"num_digits","","The number of digits in the current value.",1,null],[12,"digits_used","","Which digits appear in the current value.",1,null],[5,"solve","","Find the sum of all 10-digit pandigital numbers satisfying…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"new","","Construct a new `SubstringTree`.",1,[[],["substringtree"]]],[11,"condition_satisfied","","Check if the most recent substring condition has been…",1,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"next_steps","","Al possible choices for the next digit - that is, those…",1,[[["self"]],["vec"]]],[11,"should_prune","","Check if the most recent condition is satisfied, and prune…",1,[[["self"]],["pruning"]]],[11,"apply_step","","Add the next digit to the end of the current value.",1,[[["self"]]]],[11,"revert_step","","Remove the last digit from the end of the current value.",1,[[["self"]]]],[11,"output","","Output the current value, if it is the right length and…",1,[[["self"]],["option"]]]],"p":[[3,"SubstringTreeStep"],[3,"SubstringTree"]]};
searchIndex["problem044"] = {"doc":"Problem 44 (Pentagon numbers)","i":[[5,"is_pentagonal","problem044","A function to check if a given number is pentagonal.",null,[[["u64"]],["bool"]]],[5,"solve","","Find the smallest difference between a pair of pentagonal…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem045"] = {"doc":"Problem 45 (Triangular, pentagonal and hexagonal)","i":[[5,"is_hexagonal","problem045","A function to check if a given number is hexagonal.",null,[[["u64"]],["bool"]]],[5,"solve","","Find the kth number which is simultaneously triangular,…",null,[[["usize"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem046"] = {"doc":"Problem 46 (Goldbach's other conjecture)","i":[[5,"search","problem046","Search for numbers violating the conjecture up to the…",null,[[["u64"]],[["option",["u64"]],["u64"]]]],[5,"solve","","Find the smallest odd composite that cannot be written as…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem047"] = {"doc":"Problem 47 (Distinct primes factors)","i":[[5,"has_at_least_n_prime_factors","problem047","",null,[[["sieve"],["usize"],["u64"]],["bool"]]],[5,"solve","","Find the first n consecutive numbers to have at least n…",null,[[["usize"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem048"] = {"doc":"Problem 48 (Self powers)","i":[[5,"solve","problem048","Find the last 10 digits of the sum 1^1 + 2^2 + ... + n^n.",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem049"] = {"doc":"Problem 49 (Prime permutations)","i":[[5,"to_int","problem049","Convert a vector of digits into an actual number.",null,[[],["u64"]]],[5,"to_digits","","Convert a number into a vector of digits.",null,[[["u64"]],[["vec",["u64"]],["u64"]]]],[5,"permutations_in_set","","Finds the permutations of n which belong to the given set.",null,[[["u64"],["hashset"]],[["hashset",["u64"]],["u64"]]]],[5,"solve","","Finds the arithmetic progression of three 4-digit primes,…",null,[[],[["vec",["u64"]],["u64"]]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem050"] = {"doc":"Problem 50 (Consecutive prime sum)","i":[[5,"solve","problem050","Find the prime below n which can be written as the sum of…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem051"] = {"doc":"Problem 51 (Prime digit replacements)","i":[[3,"Template","problem051","A structure representing a template.",null,null],[12,"concrete_value","","The value that is represented only by the digits in…",0,null],[12,"wildcard_value","","The value that would result from setting all wildcards to…",0,null],[12,"length","","The length of the template.",0,null],[12,"wildcards","","The number of wildcards in the template.",0,null],[3,"TemplateTreeStep","","A description of a step that can be taken in the search…",null,null],[12,"next_symbol","","",1,null],[3,"TemplateTree","","The information that is held about the current state…",null,null],[12,"template","","",2,null],[12,"required_length","","",2,null],[4,"Symbol","","A single symbol, either a digit or a wildcard, in a…",null,null],[13,"Digit","","A fixed digit.",3,null],[13,"Wildcard","","A wildcard, which can be substituted later for any digit.",3,null],[5,"solve","","Find the smallest member of an 8-prime digit replacement…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"empty","","A new, empty template consisting of zero symbols.",0,[[],["template"]]],[11,"add_symbol","","Add a symbol to the end of the template.",0,[[["self"],["symbol"]]]],[11,"remove_symbol","","Remove a symbol from the end of the template.",0,[[["self"],["symbol"]]]],[11,"get_substitution","","Get the value which results from substituting the wildcard…",0,[[["self"],["u64"]],["u64"]]],[11,"get_prime_substitutions","","Get all substitutions resulting from this template which…",0,[[["self"],["sieve"]],[["vec",["u64"]],["u64"]]]],[11,"with_required_length","","Construct a new `TemplateTree` which will search for…",2,[[["usize"]],["templatetree"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"clone","","",0,[[["self"]],["template"]]],[11,"next_steps","","All possible choices of the next symbol to put in the…",2,[[["self"]],["vec"]]],[11,"should_prune","","Don't go any deeper in the tree than the required template…",2,[[["self"]],["pruning"]]],[11,"apply_step","","Add the next symbol to the end of the current template.",2,[[["self"]]]],[11,"revert_step","","Remove the last symbol from the current template.",2,[[["self"]]]],[11,"output","","Output the current template, if it is of the right length.",2,[[["self"]],["option"]]]],"p":[[3,"Template"],[3,"TemplateTreeStep"],[3,"TemplateTree"],[4,"Symbol"]]};
searchIndex["problem052"] = {"doc":"Problem 52 (Permuted multiples)","i":[[5,"to_digit_count","problem052","Convert the given number into a count of how many times…",null,[[["u64"]]]],[5,"solve","","Find the smallest number x for which 2x, 3x..., 6x all…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem053"] = {"doc":"Problem 53 (Combinatoric selections)","i":[[3,"BinomialCoefficientsWithNumerator","problem053","A structure which will allow iteration over binomial…",null,null],[12,"value","","The value of the current coefficient.",0,null],[12,"numer","","The numerator of the current coefficient.",0,null],[12,"denom","","The denominator of the current coefficient.",0,null],[12,"denom_limit","","The highest denominator to consider for these coefficients.",0,null],[5,"binomial_coefficients_lower_half","","Returns an iterator of the binomials coefficients n choose…",null,[[["u64"]],["binomialcoefficientswithnumerator"]]],[5,"first_binomial_coefficient_to_exceed","","Returns the smallest r for which n choose r exceeds the…",null,[[["u64"]],[["option",["u64"]],["u64"]]]],[5,"solve","","Find the number of binomial coefficients n choose r, with…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"next","","",0,[[["self"]],[["option",["u64"]],["u64"]]]]],"p":[[3,"BinomialCoefficientsWithNumerator"]]};
searchIndex["problem054"] = {"doc":"Problem 54 (Poker hands)","i":[[3,"Card","problem054","A structure holding a single playing card.",null,null],[12,"rank","","",0,null],[12,"suit","","",0,null],[3,"PokerHand","","A structure representing a poker hand in a canonical form…",null,null],[12,"hand_type","","",1,null],[12,"distinct_ranks","","",1,null],[4,"Suit","","The suits that a playing card can belong to.",null,null],[13,"Hearts","","",2,null],[13,"Diamonds","","",2,null],[13,"Clubs","","",2,null],[13,"Spades","","",2,null],[4,"Rank","","The ranks that a playing car can hold.",null,null],[13,"AceLow","","",3,null],[13,"Two","","",3,null],[13,"Three","","",3,null],[13,"Four","","",3,null],[13,"Five","","",3,null],[13,"Six","","",3,null],[13,"Seven","","",3,null],[13,"Eight","","",3,null],[13,"Nine","","",3,null],[13,"Ten","","",3,null],[13,"Jack","","",3,null],[13,"Queen","","",3,null],[13,"King","","",3,null],[13,"Ace","","",3,null],[4,"PokerHandType","","The different classes of poker hand that are available.",null,null],[13,"HighCard","","",4,null],[13,"Pair","","",4,null],[13,"TwoPair","","",4,null],[13,"ThreeOfAKind","","",4,null],[13,"Straight","","",4,null],[13,"Flush","","",4,null],[13,"FullHouse","","",4,null],[13,"FourOfAKind","","",4,null],[13,"StraightFlush","","",4,null],[5,"solve","","Find the number of games of poker from the given hands…",null,[[["i"]],[["string"],["usize"],["result",["usize","string"]]]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"from_byte","","Convert a byte from the set 'HDCS' into a suit.",2,[[["u8"]],[["string"],["result",["suit","string"]],["suit"]]]],[11,"from_byte","","Convert a byte from the set '23456789TJQKA' into a rank.",3,[[["u8"]],[["rank"],["result",["rank","string"]],["string"]]]],[11,"get_rank","","Get the rank of this card.",0,[[["self"]],["rank"]]],[11,"get_suit","","Get the suit of thi card.",0,[[["self"]],["suit"]]],[11,"from_cards","","Convert an array of 5 cards into a `PokerHand`.",1,[[],[["result",["pokerhand","string"]],["pokerhand"],["string"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"equivalent","","",0,[[["k"],["self"]],["bool"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"equivalent","","",1,[[["k"],["self"]],["bool"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"equivalent","","",2,[[["k"],["self"]],["bool"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"equivalent","","",3,[[["k"],["self"]],["bool"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"equivalent","","",4,[[["k"],["self"]],["bool"]]],[11,"vzip","","",4,[[],["v"]]],[11,"clone","","",2,[[["self"]],["suit"]]],[11,"clone","","",3,[[["self"]],["rank"]]],[11,"clone","","",0,[[["self"]],["card"]]],[11,"clone","","",4,[[["self"]],["pokerhandtype"]]],[11,"assert_receiver_is_total_eq","","",2,[[["self"]]]],[11,"assert_receiver_is_total_eq","","",3,[[["self"]]]],[11,"assert_receiver_is_total_eq","","",0,[[["self"]]]],[11,"assert_receiver_is_total_eq","","",4,[[["self"]]]],[11,"assert_receiver_is_total_eq","","",1,[[["self"]]]],[11,"cmp","","",3,[[["self"],["rank"]],["ordering"]]],[11,"cmp","","",4,[[["self"],["pokerhandtype"]],["ordering"]]],[11,"cmp","","",1,[[["pokerhand"],["self"]],["ordering"]]],[11,"eq","","",2,[[["self"],["suit"]],["bool"]]],[11,"eq","","",3,[[["self"],["rank"]],["bool"]]],[11,"eq","","",0,[[["card"],["self"]],["bool"]]],[11,"ne","","",0,[[["card"],["self"]],["bool"]]],[11,"eq","","",4,[[["self"],["pokerhandtype"]],["bool"]]],[11,"eq","","",1,[[["pokerhand"],["self"]],["bool"]]],[11,"ne","","",1,[[["pokerhand"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["rank"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",4,[[["self"],["pokerhandtype"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["pokerhand"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",1,[[["pokerhand"],["self"]],["bool"]]],[11,"le","","",1,[[["pokerhand"],["self"]],["bool"]]],[11,"gt","","",1,[[["pokerhand"],["self"]],["bool"]]],[11,"ge","","",1,[[["pokerhand"],["self"]],["bool"]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"from_str","","Get a `Card` from a string such as '8H', 'TD' or 'AS'.",0,[[["str"]],[["result",["card","string"]],["card"],["string"]]]]],"p":[[3,"Card"],[3,"PokerHand"],[4,"Suit"],[4,"Rank"],[4,"PokerHandType"]]};
searchIndex["problem055"] = {"doc":"Problem 55 (Lychrel numbers)","i":[[5,"reverse","problem055","Calculates the result of reversing the digits of the given…",null,[[["biguint"]],["biguint"]]],[5,"is_lychrel","","Determines whether the given number is a possible Lychrel…",null,[[["usize"]],["bool"]]],[5,"solve","","Find the number of Lychrel numbers below the given limit,…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem056"] = {"doc":"Problem 56 (Powerful digit sum)","i":[[5,"sum_of_digits","problem056","Calculate the sum of the digits (in base 10) of the given…",null,[[["biguint"]],["u64"]]],[5,"solve","","Find the largest digital sum among numbers of the form…",null,[[["usize"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem057"] = {"doc":"Problem 57 (Square root convergents)","i":[[5,"solve","problem057","Find how many of the first `num_expansions` expansions of…",null,[[["u64"],["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem058"] = {"doc":"Problem 58 (Spiral primes)","i":[[5,"is_prime_safe","problem058","Check if the given number is prime using the given prime…",null,[[["u64"],["sieve"]],["bool"]]],[5,"solve","","Find how many layers of a spiral grid must be generated…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem059"] = {"doc":"Problem 59 (XOR decryption)","i":[[5,"solve","problem059","Find the sum of the bytes in a plaintext, given the…",null,[[["usize"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem060"] = {"doc":"Problem 60 (Prime pair sets)","i":[[3,"PrimeSet","problem060","A structure representing a set of primes, and their sum.",null,null],[12,"primes","","",0,null],[12,"sum","","",0,null],[3,"PrimePairs","","A structure that holds, for each prime, the primes that…",null,null],[12,"pairs","","A cache to hold the results of previous checks.",1,null],[3,"PrimePairTree","","A structure that can be used for conducting a depth-first…",null,null],[12,"primes","","The prime numbers up to the maximum prime to be considered.",2,null],[12,"prime_pairs","","A checker",2,null],[12,"prime_set","","The current set of primes that is being examined.",2,null],[12,"required_size","","The size of prime set that we are looking for.",2,null],[12,"best_sum","","The smallest sum of any prime set found so far.",2,null],[3,"PrimePairTreeStep","","A description of a step that can be taken in the search…",null,null],[12,"next_prime","","",3,null],[5,"concat","","The result of concatenating the numbers `p` and `q`.",null,[[["u64"]],["u64"]]],[5,"solve","","Find the smallest sum of a set of primes such that any…",null,[[["usize"],["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"empty","","Construct a new, initially empty, `PrimeSet`.",0,[[],["primeset"]]],[11,"add","","Add the given prime to this `PrimeSet`.",0,[[["self"],["u64"]]]],[11,"remove","","Remove the most recent prime from this `PrimeSet`.",0,[[["self"]]]],[11,"len","","Get the number of primes currently held in this `PrimeSet`.",0,[[["self"]],["usize"]]],[11,"max","","Get the largest prime held in this `PrimeSet`.",0,[[["self"]],[["option",["u64"]],["u64"]]]],[11,"from_primes","","Creates a new `PrimePairs`, checking the given primes and…",1,[[["sieve"]],["primepairs"]]],[11,"get_allowed_primes","","Get a `HashSet` containing all the primes `q` that are…",1,[[["self"],["u64"]],[["option",["hashset"]],["hashset"]]]],[11,"new","","Constructs a new `PrimePairTree` which will search for…",2,[[["usize"],["u64"]],["primepairtree"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"clone","","",0,[[["self"]],["primeset"]]],[11,"next_steps","","All possible choices of the next prime to put into the set.",2,[[["self"]],["vec"]]],[11,"should_prune","","Don't go any deeper in the tree than the required size,…",2,[[["self"]],["pruning"]]],[11,"apply_step","","Add the next prime to the set.",2,[[["self"]]]],[11,"revert_step","","Remove the last prime from the set.",2,[[["self"]]]],[11,"output","","Output the current set of primes, if its sum is small…",2,[[["self"]],["option"]]]],"p":[[3,"PrimeSet"],[3,"PrimePairs"],[3,"PrimePairTree"],[3,"PrimePairTreeStep"]]};
searchIndex["problem061"] = {"doc":"Problem 61 (Cyclical figurate numbers)","i":[[3,"CyclicPolygonalTree","problem061","A structure that can be used for conducting a depth-first…",null,null],[12,"required_size","","The size of the set that we are looking for.",0,null],[12,"polygonal_numbers","","Precomputed lists of polygonal numbers having the right…",0,null],[12,"polygonal_types_used","","A boolean array indicating which types of polygonal number…",0,null],[12,"current_set","","The set of numbers currently being considered.",0,null],[3,"CyclicPolygonalTreeStep","","A description of a step that can be taken in the search…",null,null],[12,"next_number","","The next number to be added to the set.",1,null],[12,"polygonal_type","","The index of the type of polygonal numbers that this…",1,null],[5,"digits_match","","",null,[[["u64"]],["bool"]]],[5,"solve","","Find the sum of all cyclic sequences of 4-digit polygonal…",null,[[["usize"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"with_required_size","","Constructs a new `CyclicPolygonalTree` which will search…",0,[[["usize"]],["cyclicpolygonaltree"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"next_steps","","All possible choices of the next number to put into the set.",0,[[["self"]],["vec"]]],[11,"should_prune","","The pruning actually happens as a side-effect of…",0,[[["self"]],["pruning"]]],[11,"apply_step","","Add the next number to the end of the current set.",0,[[["self"]]]],[11,"revert_step","","Remove the last number from the current set.",0,[[["self"]]]],[11,"output","","Output the current set, if it is of the right length, and…",0,[[["self"]],["option"]]]],"p":[[3,"CyclicPolygonalTree"],[3,"CyclicPolygonalTreeStep"]]};
searchIndex["problem062"] = {"doc":"Problem 62 (Cubic permutations)","i":[[5,"get_sorted_digits","problem062","Get the digits of the given number, in sorted order.",null,[[["u64"]],[["vec",["u8"]],["u8"]]]],[5,"solve","","Find the smallest cube having exactly the given number of…",null,[[["usize"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem063"] = {"doc":"Problem 63 (Powerful digit counts)","i":[[5,"solve","problem063","Find the number of nth powers which contain exactly n…",null,[[],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem064"] = {"doc":"Problem 64 (Odd period square roots)","i":[[5,"solve","problem064","Find the number of square roots, up to the square root of…",null,[[["u64"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem065"] = {"doc":"Problem 65 (Convergents of e)","i":[[5,"solve","problem065","Find the sum of the digits of the numerator of the given…",null,[[["usize"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem066"] = {"doc":"Problem 66 (Diophantine equation)","i":[[5,"minimal_solution","problem066","Finds the minimal solution (x, y) to the Pell equation…",null,[[["u64"]]]],[5,"solve","","Find the value of D, not exceeding the given limit, for…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem067"] = {"doc":"Problem 67 (Maximum path sum II)","i":[[5,"solve","problem067","Find the maximum sum of a path through the given…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem068"] = {"doc":"Problem 68 (Magic 5-gon ring)","i":[[5,"answer","problem068","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem069"] = {"doc":"Problem 69 (Totient maximum)","i":[[5,"solve","problem069","Find the value of n not exceeding the given limit for…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem070"] = {"doc":"Problem 70 (Totient permutation)","i":[[5,"are_permutations","problem070","Determine whether the two given numbers are permutations…",null,[[["u64"]],["bool"]]],[5,"solve","","Find the value of n not exceeding the given limit for…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem071"] = {"doc":"Problem 71 (Ordered fractions)","i":[[5,"solve","problem071","Find the numerator of the largest fraction with…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem072"] = {"doc":"Problem 72 (Counting fractions)","i":[[5,"solve","problem072","Find the number of reduced fractions with denominators up…",null,[[["u64"]],["i64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem073"] = {"doc":"Problem 73 (Counting fractions in a range)","i":[[5,"solve","problem073","Find the number of reduced fractions in the range (1/3,…",null,[[["u64"]],["i64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem074"] = {"doc":"Problem 74 (Digit factorial chains)","i":[[5,"factorial_digit_sum","problem074","",null,[[["usize"]],["usize"]]],[5,"find_chain_length","","",null,[[["usize"]],["usize"]]],[5,"solve","","Find how many numbers below the given limit form a chain…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem075"] = {"doc":"Problem 75 (Singular integer right triangles)","i":[[5,"solve","problem075","Find the number of perimeters below the given limit for…",null,[[["u64"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem076"] = {"doc":"Problem 76 (Counting summations)","i":[[5,"solve","problem076","Find the nth partition number.",null,[[["usize"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem077"] = {"doc":"Problem 77 (Prime summations)","i":[[5,"solve","problem077","Finds the first number that can be written as a sum of…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem078"] = {"doc":"Problem 78 (Coin partitions)","i":[[3,"Mod","problem078","",null,null],[5,"solve","","Find the index of the first partition number divisible by…",null,[[],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[6,"ModInt","","",null,null],[17,"MODULUS","","",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"equivalent","","",0,[[["k"],["self"]],["bool"]]],[11,"vzip","","",0,[[],["v"]]],[11,"clone","","",0,[[["self"]],["mod"]]],[11,"assert_receiver_is_total_eq","","",0,[[["self"]]]],[11,"eq","","",0,[[["self"],["mod"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"modulus","","",0,[[],["u64"]]]],"p":[[3,"Mod"]]};
searchIndex["problem079"] = {"doc":"Problem 79 (Passcode derivation)","i":[[5,"attempt_graph","problem079","Create a graph representing the given passcode attempts",null,[[],[["graph",["u8"]],["u8"]]]],[5,"solve","","Find the shortest passcode consistent with the given…",null,[[],["string"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem080"] = {"doc":"Problem 80 (Square root digital expansion)","i":[[5,"power_of_ten","problem080","Finds 10 to the power of `n`",null,[[["usize"]],["biguint"]]],[5,"first_digits_sqrt_sum","","Find the sum of the first digits of the square root of the…",null,[[["u64"],["usize"]],["usize"]]],[5,"solve","","Find the sum of the first decimal digits of approximations…",null,[[["u64"],["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem081"] = {"doc":"Problem 81 (Path sum: two ways)","i":[[5,"solve","problem081","Find the shortest path from the top-left to the…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem082"] = {"doc":"Problem 82 (Path sum: three ways)","i":[[5,"solve","problem082","Find the shortest path from the left to the right of the…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem083"] = {"doc":"Problem 83 (Path sum: four ways)","i":[[5,"solve","problem083","Find the shortest path from the top-left to the…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem084"] = {"doc":"Problem 84 (Monopoly odds)","i":[[3,"MonopolyBoard","problem084","",null,null],[12,"squares","","",0,null],[12,"square_indices","","",0,null],[3,"Roller","","",null,null],[12,"rng","","",1,null],[12,"range","","",1,null],[3,"MonopolySimulator","","",null,null],[12,"board","","",2,null],[12,"dice_roller","","",2,null],[12,"card_roller","","",2,null],[12,"doubles","","",2,null],[12,"current_position","","",2,null],[12,"counts","","",2,null],[4,"StepResult","","",null,null],[13,"Continue","","",3,null],[13,"Done","","",3,null],[5,"solve","","Find the three most common squares in a simulation using a…",null,[[["usize"]],[["vec",["usize"]],["usize"]]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"new","","",0,[[],["monopolyboard"]]],[11,"size","","",0,[[["self"]],["usize"]]],[11,"get_square_name","","",0,[[["self"],["usize"]],["str"]]],[11,"get_position","","",0,[[["str"],["self"]],["usize"]]],[11,"is_chance","","",0,[[["self"],["usize"]],["bool"]]],[11,"is_community_chest","","",0,[[["self"],["usize"]],["bool"]]],[11,"is_rail","","",0,[[["self"],["usize"]],["bool"]]],[11,"is_utility","","",0,[[["self"],["usize"]],["bool"]]],[11,"new","","",1,[[["usize"]],["roller"]]],[11,"next_roll","","",1,[[["self"]],["usize"]]],[11,"new","","",2,[[["usize"]],["monopolysimulator"]]],[11,"step","","Simulate the result of a single roll",2,[[["self"]]]],[11,"squares_by_popularity","","",2,[[["self"]],[["vec",["usize"]],["usize"]]]],[11,"handle_doubles","","Handle tracking doubles as part of a turn, and go to JAIL…",2,[[["self"]],["stepresult"]]],[11,"handle_moving","","Handle actually moving the piece as a result of the roll",2,[[["self"]],["stepresult"]]],[11,"handle_go_to_jail","","Handle landing on Go To Jail",2,[[["self"]],["stepresult"]]],[11,"handle_chance","","",2,[[["self"]],["stepresult"]]],[11,"handle_community_chest","","",2,[[["self"]],["stepresult"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"equivalent","","",3,[[["k"],["self"]],["bool"]]],[11,"assert_receiver_is_total_eq","","",3,[[["self"]]]],[11,"eq","","",3,[[["stepresult"],["self"]],["bool"]]]],"p":[[3,"MonopolyBoard"],[3,"Roller"],[3,"MonopolySimulator"],[4,"StepResult"]]};
searchIndex["problem085"] = {"doc":"Problem 85 (Counting rectangles)","i":[[5,"triangle","problem085","Calculate the nth triangular number",null,[[["u64"]],["u64"]]],[5,"triangles_until","","Find the triangular numbers up to and including the first…",null,[[["u64"]],[["vec",["u64"]],["u64"]]]],[5,"first_index_greater_than","","Find the index of the first entry in the (sorted!) vector…",null,[[["u64"]],["usize"]]],[5,"solve","","Find the area of the rectangle with a number of…",null,[[["u64"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem086"] = {"doc":"Problem 86 (Cuboid route)","i":[[5,"pairs_with_sum","problem086","Find the number of pairs x, y with 1 ≤ x ≤ y ≤ lim and x +…",null,[[["u64"]],["u64"]]],[5,"cuboids_with_longest_side","","Find the number of cuboids with an integer shortest path…",null,[[["u64"]],["u64"]]],[5,"solve","","Find the least value of m such that there are at least the…",null,[[["u64"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem087"] = {"doc":"Problem 87 (Prime power triples)","i":[[5,"power","problem087","Raises n to the given power",null,[[["u64"],["usize"]],["u64"]]],[5,"solve","","Find the number of values less than the given limit which…",null,[[["u64"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem088"] = {"doc":"Problem 88 (Product-sum numbers)","i":[[3,"SequenceData","problem088","Important data about a sequence of numbers",null,null],[12,"sum","","The sum of the sequence",0,null],[12,"product","","The product of the sequence",0,null],[12,"length","","The length of the sequence",0,null],[3,"SequenceTree","","The information held about the current sequence during a…",null,null],[12,"sum","","The sum of the current sequence",1,null],[12,"product","","The product of the current sequence",1,null],[12,"values","","The values in the current sequence",1,null],[12,"maximum_product","","The maximum product of sequences to find",1,null],[3,"SequenceTreeStep","","A description of a step that can be taken in the search…",null,null],[12,"next_value","","The next number to add to the sequence",2,null],[5,"solve","","Find the sum of the minimal product-sum numbers for 2 ≤ k…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"new","","Construct a new `SequenceTree`",1,[[["usize"]],["sequencetree"]]],[11,"last_value","","",1,[[["self"]],["usize"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"next_steps","","Return all possible choices for the next value to add to…",1,[[["self"]],["vec"]]],[11,"should_prune","","Never prune this tree",1,[[["self"]],["pruning"]]],[11,"apply_step","","Add the next digit to the sequence",1,[[["self"]]]],[11,"revert_step","","Remove the last digit from the sequence",1,[[["self"]]]],[11,"output","","Output the key stats of the current sequence",1,[[["self"]],["option"]]]],"p":[[3,"SequenceData"],[3,"SequenceTree"],[3,"SequenceTreeStep"]]};
searchIndex["problem089"] = {"doc":"Problem 89 (Roman numerals)","i":[[5,"numeral_value","problem089","",null,[[["char"]],["usize"]]],[5,"read_numeral","","Read the given numeral as an integer.",null,[[["str"]],["usize"]]],[5,"write_numeral","","Write the given integer as a Roman numeral.",null,[[["usize"]],["string"]]],[5,"solve","","Find the number of characters saved when the given…",null,[[],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem090"] = {"doc":"Problem 90 (Cube digit pairs)","i":[[5,"can_represent_squares","problem090","Check if the given dice are capaable of representing all…",null,[[["hashset"]],["bool"]]],[5,"make_die","","",null,[[["vec",["usize"]],["usize"]],[["usize"],["hashset",["usize"]]]]],[5,"solve","","Find the number of dice arrangements allowing the…",null,[[],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[6,"Die","","",null,null],[17,"SQUARES","","All of the two-digit squares, given as a pair of digits.",null,null]],"p":[]};
searchIndex["problem091"] = {"doc":"Problem 91 (Right triangles with integer coordinates)","i":[[5,"count_third_vertices","problem091","Count the number of third vertices that, along with the…",null,[[["u64"]],["u64"]]],[5,"solve","","Find the number of right-angled triangles having their…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem092"] = {"doc":"Problem 92 (Square digit chains)","i":[[5,"sum_of_squares","problem092","Find the sum of the squares of the digits of the given…",null,[[["usize"]],["usize"]]],[5,"solve","","Find the count of unhappy numbers below the given limit.",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem093"] = {"doc":"Problem 93 (Arithmetic expressions)","i":[[5,"digit_set_to_integer","problem093","A handy conversion to represent four digits as one number",null,[[],["usize"]]],[5,"all_ops","","All results of a binary operation on the two given numbers",null,[[["ratio"]],[["ratio",["isize"]],["vec",["ratio"]]]]],[5,"update","","Update the target `HashSet` with all possible operations…",null,[[["hashset"],["hashset"]]]],[5,"count_consecutive","","Count the consecutive integers 1, 2, ..., n that exist in…",null,[[["hashset"]],["usize"]]],[5,"solve","","Find the four digits which allow the most consecutive…",null,[[]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[6,"DigitSet","","",null,null],[6,"Target","","",null,null]],"p":[]};
searchIndex["problem094"] = {"doc":"Problem 94 (Almost equilateral triangles)","i":[[5,"solve","problem094","Find the sum of perimeters of all almost-equilateral…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem095"] = {"doc":"Problem 95 (Amicable chains)","i":[[5,"find_cycle_lengths","problem095","Find the cycle length of each starting number under the…",null,[[],[["vec",["option"]],["option",["usize"]]]]],[5,"solve","","Find the smallest member of the longest amicable chain…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem096"] = {"doc":"Problem 96 (Su Doku)","i":[[3,"SudokuTree","problem096","The state of the current puzzle during a depth-first solve",null,null],[12,"grid","","The values currently held in the grid",0,null],[3,"SudokuTreeStep","","A description of a step that can be taken in the search…",null,null],[12,"cell","","The coordinates of the cell to assign a value to",1,null],[12,"value","","The value to assign to this cell",1,null],[5,"solve_sudoku","","Find the solution to a single Sudoku puzzle",null,[[],["option"]]],[5,"solve","","Solve all of the given Sudoku puzzles and sum the…",null,[[],["usize"]]],[5,"read_grid","","",null,[[["bufreader"]],["option"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[6,"Grid","","",null,null],[6,"Coords","","",null,null],[11,"new","","Construct a new `SudokuTree`, initialized with the given…",0,[[],["sudokutree"]]],[11,"empty_cell","","Find the coordinates of the first empty cell in the…",0,[[["self"]],["option"]]],[11,"allowed_values","","Find all values that are allowed in the given cell.",0,[[["self"]],[["vec",["usize"]],["usize"]]]],[11,"values_in_neighbourhood","","Find all values in the neighbourhood of the given cell",0,[[["self"]]]],[11,"values_in_row","","Find all values that already exist in the row of the given…",0,[[["self"]]]],[11,"values_in_col","","Find all values that already exist in the column of the…",0,[[["self"]]]],[11,"values_in_region","","Find all values that already exist in the region of the…",0,[[["self"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"next_steps","","Return all possible choices for the next value to place in…",0,[[["self"]],["vec"]]],[11,"should_prune","","Never prune this tree - backtracking will happen…",0,[[["self"]],["pruning"]]],[11,"apply_step","","Add the next digit to the partially-solved grid",0,[[["self"]]]],[11,"revert_step","","Remove the last digit from the sequence",0,[[["self"]]]],[11,"output","","If the grid is solved, then output the solution",0,[[["self"]],["option"]]]],"p":[[3,"SudokuTree"],[3,"SudokuTreeStep"]]};
searchIndex["problem097"] = {"doc":"Problem 97 (Large non-Mersenne prime)","i":[[5,"solve","problem097","Calculate the last 10 digits of the large non-Mersenne prime",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem098"] = {"doc":"Problem 98 (Anagramic squares)","i":[[3,"SignaturedHashMaps","problem098","A struct that represents anagrams from a given set of…",null,null],[12,"by_letters","","",0,null],[12,"by_signature","","",0,null],[5,"alphabetical_string","","Sort the letters of the given word into alphabetical order.",null,[[["str"]],["string"]]],[5,"signature","","Get the signature of the given word.",null,[[["str"]],[["vec",["usize"]],["usize"]]]],[5,"mapping","","Find, if it exists, a mapping between the two given words,…",null,[[["str"]],[["option",["hashmap"]],["hashmap",["char","char"]]]]],[5,"solve","","Find the largest square number which is part of an…",null,[[],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"new","","Create a new `SignaturedHashMap` representing the given…",0,[[],["signaturedhashmaps"]]],[11,"longest_word","","Find the longest length of any word contained in these maps",0,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"add_word","","Add a word to the internal by-letters map",0,[[["str"],["self"]]]],[11,"remove_singletons","","Remove all keys that have no anagrams",0,[[["self"]]]],[11,"finalize","","Add all words to the map keyed by signatures",0,[[["self"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]]],"p":[[3,"SignaturedHashMaps"]]};
searchIndex["problem099"] = {"doc":"Problem 99 (Largest exponential","i":[[5,"solve","problem099","Find the index (1-indexed) of the tuple `(a, b)` for which…",null,[[],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem100"] = {"doc":"Problem 100 (Arranged probability)","i":[[5,"solve","problem100","Find the sum of perimeters of all almost-equilateral…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem101"] = {"doc":"Problem 101 (Optimum polynomial)","i":[[5,"interpolate_next_term","problem101","Find the next term of the given sequence, assuming that…",null,[[],["i64"]]],[5,"nth_term","","Calculate the nth term of the sequence given in the problem.",null,[[["i64"]],["i64"]]],[5,"solve","","Find the sum of the incorrect interpolated terms of all…",null,[[],["i64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem102"] = {"doc":"Problem 102 (Triangle containment)","i":[[5,"contains_origin","problem102","Check if the given triangle contains the origin.",null,[[],["bool"]]],[5,"solve","","Find the count of the given triangles which contain…",null,[[],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[6,"Point","","",null,null],[6,"Triangle","","",null,null]],"p":[]};
searchIndex["problem103"] = {"doc":"Problem 103 (Special subset sums: optimum)","i":[[3,"SpecialSumSet","problem103","A structure representing a special sum set",null,null],[12,"average","","",0,null],[12,"elements","","",0,null],[12,"sums","","",0,null],[3,"SpecialSumSetIterator","","A structure capable of iterating over `SpecialSumSet`s…",null,null],[12,"priority_q","","",1,null],[5,"solve","","Find an optimum special sum set containing the given…",null,[[["usize"]],[["vec",["usize"]],["usize"]]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"from_pair","","Create a new `SpecialSumSet` consisting of the given two…",0,[[["usize"]],["specialsumset"]]],[11,"with_additional_element","","Attempt to add the given number to the `SpecialSumSet`,…",0,[[["self"],["usize"]],[["option",["specialsumset"]],["specialsumset"]]]],[11,"next_element_upper_bound","","Return an upper bound for the next element that can be…",0,[[["self"]],["usize"]]],[11,"new","","",1,[[],["self"]]],[11,"children_of_pair","","",1,[[["specialsumset"]],[["vec",["specialsumset"]],["specialsumset"]]]],[11,"children","","",1,[[["specialsumset"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"equivalent","","",0,[[["k"],["self"]],["bool"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"into_iter","","",1,[[],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"cmp","","",0,[[["self"]],["ordering"]]],[11,"eq","","",0,[[["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"]],[["ordering"],["option",["ordering"]]]]]],"p":[[3,"SpecialSumSet"],[3,"SpecialSumSetIterator"]]};
searchIndex["problem104"] = {"doc":"Problem 104 (Pandigital Fibonacci ends)","i":[[3,"FibonacciIterator","problem104","Iterate over the Fibonacci numbers, modulo 10^9",null,null],[12,"first","","",0,null],[12,"second","","",0,null],[5,"is_pandigital","","Check whether the given number is pandigital.",null,[[["usize"]],["bool"]]],[5,"is_fibonacci_left_pandigital","","Check whether the kth Fibonacci number is pandigital in…",null,[[["usize"]],["bool"]]],[5,"solve","","Find the index of the first Fibonacci number which is…",null,[[],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[18,"MODULUS","","",0,null],[11,"new","","",0,[[],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"next","","",0,[[["self"]],["option"]]]],"p":[[3,"FibonacciIterator"]]};
searchIndex["problem105"] = {"doc":"Problem 105 (Special subset sums: testing)","i":[[5,"distinct_subset_sums","problem105","Check if the given set has distinct subset sums - simply…",null,[[],["bool"]]],[5,"large_subset_sums","","Check if the given set satisfies the condition that larger…",null,[[],["bool"]]],[5,"solve","","Find the sum of the elements of the given sets which are…",null,[[],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem106"] = {"doc":"Problem 106 (Special subset sums: meta-testing)","i":[[5,"catalan","problem106","Find the Catalan number `Cₛ`",null,[[["usize"]],["usize"]]],[5,"trivial_pairs","","Find the number of pairs of subsets of size `s`, from a…",null,[[["usize"]],["usize"]]],[5,"total_pairs","","Find the total number of pairs of subsets of size `s` from…",null,[[["usize"]],["usize"]]],[5,"solve","","Find the number of pairs of subsets that must be tested…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem107"] = {"doc":"Problem 107 (Minimal network)","i":[[5,"network_graph","problem107","Create a graph representing the given adjacency matrix",null,[[],[["undirected"],["graph",["usize","usize","undirected"]],["usize"]]]],[5,"solve","","Find the largest possible saving that can be achieved by…",null,[[],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem108"] = {"doc":"Problem 108 (Diophantine reciprocals I)","i":[[3,"SquareDivisorsTree","problem108","The state of the search for numbers whose squares have…",null,null],[12,"target","","The target number of divisors for the search",0,null],[12,"best_solution","","The smallest solution found so far",0,null],[12,"primes","","Some small primes, used to turn a sequence of exponents…",0,null],[12,"exponents","","The sequence of exponents of the current node",0,null],[12,"value","","The numerical value of the current node",0,null],[12,"divisors","","The number of divisors of the square of the current node",0,null],[3,"SquareDivisorsTreeStep","","A step that can be taken in the search tree",null,null],[12,"exponent","","The exponent to add as the next one in the sequence",1,null],[5,"solve","","Find the smallest `n` for which the equation has more than…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"new","","Construct a new `SquareDivisorsTree` which will search for…",0,[[["u64"]],["self"]]],[11,"prime_at","","Get the prime at index `k`, generating more primes if…",0,[[["self"],["usize"]],["u64"]]],[11,"next_exponent_ub","","Get an upper bound for the next exponent that can be added…",0,[[["self"]],["u64"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"next_steps","","Return all possible choices for the next value to add to…",0,[[["self"]],["vec"]]],[11,"should_prune","","Prune the tree if the value of this node is larger than…",0,[[["self"]],["pruning"]]],[11,"apply_step","","Add the next exponent to the current sequence",0,[[["self"]]]],[11,"revert_step","","Remove the last digit from the sequence",0,[[["self"]]]],[11,"output","","If the number of divisors exceeds the target, then output…",0,[[["self"]],["option"]]]],"p":[[3,"SquareDivisorsTree"],[3,"SquareDivisorsTreeStep"]]};
searchIndex["problem109"] = {"doc":"Problem 109 (Darts)","i":[[5,"solve","problem109","Find the number of darts checkouts for scores less than…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem110"] = {"doc":"Problem 110 (Diophantine reciprocals II)","i":[[3,"SquareDivisorsTree","problem110","The state of the search for numbers whose squares have…",null,null],[12,"target","","The target number of divisors for the search",0,null],[12,"best_solution","","The smallest solution found so far",0,null],[12,"primes","","Some small primes, used to turn a sequence of exponents…",0,null],[12,"exponents","","The sequence of exponents of the current node",0,null],[12,"value","","The numerical value of the current node",0,null],[12,"divisors","","The number of divisors of the square of the current node",0,null],[3,"SquareDivisorsTreeStep","","A step that can be taken in the search tree",null,null],[12,"exponent","","The exponent to add as the next one in the sequence",1,null],[5,"solve","","Find the smallest `n` for which the equation has more than…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"new","","Construct a new `SquareDivisorsTree` which will search for…",0,[[["u64"]],["self"]]],[11,"prime_at","","Get the prime at index `k`, generating more primes if…",0,[[["self"],["usize"]],["u64"]]],[11,"next_exponent_ub","","Get an upper bound for the next exponent that can be added…",0,[[["self"]],["u64"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"next_steps","","Return all possible choices for the next value to add to…",0,[[["self"]],["vec"]]],[11,"should_prune","","Prune the tree if the value of this node is larger than…",0,[[["self"]],["pruning"]]],[11,"apply_step","","Add the next exponent to the current sequence",0,[[["self"]]]],[11,"revert_step","","Remove the last digit from the sequence",0,[[["self"]]]],[11,"output","","If the number of divisors exceeds the target, then output…",0,[[["self"]],["option"]]]],"p":[[3,"SquareDivisorsTree"],[3,"SquareDivisorsTreeStep"]]};
searchIndex["problem111"] = {"doc":"Problem 111 (Primes with runs)","i":[[5,"to_integer","problem111","Turn the given digits into a number",null,[[],["usize"]]],[5,"repeated_digit_prime_sum","","The sum of all of the prime `n` digit numbers in which…",null,[[["sieve"],["usize"]],["usize"]]],[5,"solve","","Find the sum of all primes with a given number of digits,…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem112"] = {"doc":"Problem 112 (Bouncy numbers)","i":[[5,"is_increasing","problem112","Check if the number has its digits in increasing order",null,[[["usize"]],["bool"]]],[5,"is_decreasing","","Check if the number has its digits in decreasing order",null,[[["usize"]],["bool"]]],[5,"is_bouncy","","Check if the given number is bouncy",null,[[["usize"]],["bool"]]],[5,"solve","","Find the first number `n` for which the proportion of…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem113"] = {"doc":"Problem 113 (Non-bouncy numbers)","i":[[5,"solve","problem113","Find the number of non-bouncy numbers with at most the…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem114"] = {"doc":"Problem 114 (Counting block combinations I)","i":[[3,"BricksRecurrenceIterator","problem114","A structure capable of iterating over the number of ways…",null,null],[12,"values","","",0,null],[5,"solve","","Find the number of ways of filling a row of length `n`…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"new","","Construct a new `BricksRecurrenceIterator`",0,[[],["bricksrecurrenceiterator"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"next","","",0,[[["self"]],["option"]]]],"p":[[3,"BricksRecurrenceIterator"]]};
searchIndex["problem115"] = {"doc":"Problem 115 (Counting block combinations II)","i":[[3,"BricksRecurrenceIterator","problem115","A structure capable of iterating over the number of ways…",null,null],[12,"m","","",0,null],[12,"values","","",0,null],[5,"solve","","Find the first `n` for which the number of ways of filling…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"new","","Construct a new `BricksRecurrenceIterator` that calculates…",0,[[["usize"]],["bricksrecurrenceiterator"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"next","","",0,[[["self"]],["option"]]]],"p":[[3,"BricksRecurrenceIterator"]]};
searchIndex["problem116"] = {"doc":"Problem 116 (Red, green or blue tiles)","i":[[3,"BricksRecurrenceIterator","problem116","A structure capable of iterating over the number of ways…",null,null],[12,"m","","",0,null],[12,"values","","",0,null],[5,"solve","","Find the number of ways of tiling a row of length `n` with…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"new","","Construct a new `BricksRecurrenceIterator` that calculates…",0,[[["usize"]],["bricksrecurrenceiterator"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"next","","",0,[[["self"]],["option"]]]],"p":[[3,"BricksRecurrenceIterator"]]};
searchIndex["problem117"] = {"doc":"Problem 117 (Red, green, and blue tiles)","i":[[3,"BricksRecurrenceIterator","problem117","A structure capable of iterating over the number of ways…",null,null],[12,"values","","",0,null],[5,"solve","","Find the number of ways of tiling a row of length `n` with…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"new","","Construct a new `BricksRecurrenceIterator` that calculates…",0,[[["usize"]],["bricksrecurrenceiterator"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"next","","",0,[[["self"]],["option"]]]],"p":[[3,"BricksRecurrenceIterator"]]};
searchIndex["problem118"] = {"doc":"Problem 118 (Pandigital prime sets)","i":[[5,"to_integer","problem118","Turn the given digits into a number",null,[[],["u64"]]],[5,"prime_permutations","","Find the number of permutations of the given digits which…",null,[[["sieve"]],["usize"]]],[5,"solve","","Find the number of pandigital prime sets.",null,[[],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem119"] = {"doc":"Problem 119 (Digit power sum)","i":[[3,"Power","problem119","A structure that represents a perfect power",null,null],[12,"base","","",0,null],[12,"exponent","","",0,null],[12,"value","","",0,null],[3,"PowersIterator","","An iterator over sequential perfect powers, ignoring those…",null,null],[12,"queue","","A priority queue where perfect powers are queued up in…",1,null],[12,"next_base","","The first power of the \"next\" base that hasn't yet been…",1,null],[5,"sum_of_digits","","Returns the sum of the digits in the given number",null,[[["u64"]],["u64"]]],[5,"num_digits","","Returns the number of digits in the given number",null,[[["u64"]],["u64"]]],[5,"min_viable_exponent","","Returns the smallest exponent which, for this base, could…",null,[[["u64"]],["u64"]]],[5,"solve","","Find the nth number which is the sum of its digits raised…",null,[[["usize"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"from","","Construct a new `Power` with the given base and exponent",0,[[["u64"]],[["power"],["option",["power"]]]]],[11,"with_next_exponent","","Increase the exponent of this power by one and produce a…",0,[[["self"]],[["power"],["option",["power"]]]]],[11,"is_digit_sum","","Check if this is a digit sum power",0,[[["self"]],["bool"]]],[11,"new","","Construct a new `PowersIterator` that will iterate over…",1,[[],["powersiterator"]]],[11,"enqueue","","Enqueue the given `Power` by adding it the the `BinaryHeap`",1,[[["self"],["power"],["option",["power"]]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"equivalent","","",0,[[["k"],["self"]],["bool"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"into_iter","","",1,[[],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"next","","Get the next power from the queue and add the same power…",1,[[["self"]],["option"]]],[11,"clone","","",0,[[["self"]],["power"]]],[11,"cmp","","",0,[[["self"]],["ordering"]]],[11,"eq","","",0,[[["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[3,"Power"],[3,"PowersIterator"]]};
searchIndex["problem120"] = {"doc":"Problem 120 (Square remainders)","i":[[5,"solve","problem120","Find the sum of r_max over all 3 ≤ a ≤ lim.",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem121"] = {"doc":"Problem 121 (Disc game prize fund)","i":[[5,"solve","problem121","Find the maximum prize fund that should be allocated for a…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem122"] = {"doc":"Problem 122 (Efficient exponentiation)","i":[[3,"StarChainTree","problem122","The state of the search for star chains",null,null],[12,"limit","","The maximum target value to search for chains for",0,null],[12,"best_chains","","The smallest chain seen so far for each target up to the…",0,null],[12,"value","","The value that the current star chain reaches",0,null],[12,"members","","The values that the current star chain consists of",0,null],[3,"StarChainTreeStep","","A step that can be taken in the search tree",null,null],[12,"addend","","The value to add onto the current star chain",1,null],[5,"solve","","Find the total length of all optimal star chains with…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]],[11,"new","","Create a new `StarChainTree` that will search for star…",0,[[["usize"]],["starchaintree"]]],[11,"length","","The length of the current star chain",0,[[["self"]],["usize"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"next_steps","","Return all possible choices for the next addend in the chain",0,[[["self"]],["vec"]]],[11,"should_prune","","Prune the tree if this node cannot lead to an optimal star…",0,[[["self"]],["pruning"]]],[11,"apply_step","","Add the next addend onto the star chain",0,[[["self"]]]],[11,"revert_step","","Remove the most recent addition from the chain",0,[[["self"]]]],[11,"output","","Update the optimal chain lengths",0,[[["self"]],["option"]]]],"p":[[3,"StarChainTree"],[3,"StarChainTreeStep"]]};
searchIndex["problem123"] = {"doc":"Problem 123 (Prime square remainders)","i":[[5,"solve","problem123","Find the smallest `n` so that the remainder exceeds the…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem124"] = {"doc":"Problem 124 (Ordered radicals)","i":[[5,"radicals","problem124","Find the radicals of each number in the range 1 ≤ `n` ≤…",null,[[["usize"]],[["vec",["usize"]],["usize"]]]],[5,"solve","","Find the `k`th element when all numbers 1 ≤ `n` ≤ `limit`…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem125"] = {"doc":"Problem 125 (Palindromic sums)","i":[[5,"sums_of_consecutive_squares","problem125","Calculate the set of numbers less than the given limit…",null,[[["u64"]],[["hashset",["u64"]],["u64"]]]],[5,"is_palindrome","","Check whether the given number is a palindrome.",null,[[["u64"]],["bool"]]],[5,"solve","","Find the sum of all palindromic consecutive-square-sums…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem126"] = {"doc":"Problem 126 (Cuboid layers)","i":[[5,"layer_size_counts","problem126","Calculate the number of times each layer size is used, up…",null,[[["usize"]],[["vec",["usize"]],["usize"]]]],[5,"smallest_size_with_n_occurrences","","Find the first layer size which occurs exactly `n` times,…",null,[[["usize"]],["usize"]]],[5,"solve","","Find the smallest layer size which appears exactly the…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem127"] = {"doc":"Problem 127 (abc-hits)","i":[[5,"all_radicals","problem127","Compute a list of radicals of all numbers less than the…",null,[[["usize"]],[["vec",["usize"]],["usize"]]]],[5,"abc_hits","","Determine all abc-hits with c less than the given limit.",null,[[["usize"]],["vec"]]],[5,"solve","","Find the sum of `c` in al abc-hits with `c` less than the…",null,[[["usize"]],["usize"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem128"] = {"doc":"Problem 128 (Hexagonal tile differences)","i":[[5,"solve","problem128","Find the kth tile with 3 prime differences.",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem129"] = {"doc":"Problem 129 (Repunit divisibility)","i":[[5,"solve","problem129","Find the smallest value of `n` for which A(n) exceeds the…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem130"] = {"doc":"Problem 130 (Composites with prime repunit property)","i":[[5,"solve","problem130","Find the sum of the first `k` composite values of `n` for…",null,[[["usize"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem131"] = {"doc":"Problem 131 (Prime cube partnership)","i":[[5,"solve","problem131","Find the number of primes below the given limit with the…",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem132"] = {"doc":"Problem 132 (Large repunit factors)","i":[[5,"is_factor_of_rn","problem132","Determine if p is a factor of R(n)",null,[[["u64"]],["bool"]]],[5,"solve","","Find the sum of the first `k` prime factors of R(n)",null,[[["u64"],["usize"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["problem133"] = {"doc":"Problem 133 (Repunit nonfactors)","i":[[5,"divisible_only_by_2_and_5","problem133","Determine if `n` is divisible by the primes 2 and 5 and no…",null,[[["u64"]],["bool"]]],[5,"solve","","Find the sum of the first `k` prime factors of R(n)",null,[[["u64"]],["u64"]]],[5,"answer","","Solve the problem, returning the answer as a `String`",null,[[],["string"]]],[5,"main","","",null,[[]]]],"p":[]};
searchIndex["projecteuler_rs"] = {"doc":"Solutions in Rust to the problems at Project Euler","i":[[5,"exec","projecteuler_rs","Run a particular problem, printing its solution to the…",null,[[]]],[14,"problem","","",null,null]],"p":[]};
searchIndex["search"] = {"doc":"Implementations of useful utility functions related to…","i":[[3,"DepthFirstSearcher","search","A structure which is used for iterating through a tree,…",null,null],[4,"Pruning","","An enum for the different types of pruning that can be…",null,null],[13,"Above","","Prune the tree above the current state - discount this…",0,null],[13,"Below","","Prune the tree below the current state - discount all…",0,null],[13,"None","","Do not prune the tree at this state.",0,null],[5,"binary_search","","Finds the smallest value of `n` for which func(n) is at…",null,[[["f"],["u64"]],["u64"]]],[8,"DepthFirstTree","","A trait for a tree which is to be traversed, depth-first,…",null,null],[16,"Step","","",1,null],[16,"Output","","",1,null],[10,"next_steps","","Returns the steps that can be taken from the current state…",1,[[["self"]],["vec"]]],[10,"should_prune","","Returns whether to prune the tree at the current state.",1,[[["self"]],["pruning"]]],[10,"apply_step","","Update the tree-wide state as a result of applying the…",1,[[["self"]]]],[10,"revert_step","","Update any tree-wide state by reverting the given step.",1,[[["self"]]]],[10,"output","","Maps the internal state of the tree to the actual form…",1,[[["self"]],["option"]]],[11,"into_iter","","An iterator over the nodes of the tree which meet the…",1,[[],["depthfirstsearcher"]]],[11,"run_search","","Run this tree's complete search syncrhonously",1,[[],["self"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"into_iter","","",2,[[],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"next","","",2,[[["self"]],["option"]]]],"p":[[4,"Pruning"],[8,"DepthFirstTree"],[3,"DepthFirstSearcher"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);